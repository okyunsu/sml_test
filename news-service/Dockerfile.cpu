# 극도로 최적화된 CPU 전용 멀티스테이지 빌드
# Stage 1: 빌드 스테이지 (최소한의 도구만 포함)
FROM python:3.11-slim AS builder

# 빌드 환경 최적화
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

WORKDIR /build

# 빌드에 필요한 최소 패키지만 설치
RUN apt-get update && apt-get install -y \
    --no-install-recommends \
    gcc \
    g++ \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# CPU 전용 requirements 복사
COPY requirements-cpu.txt .

# PyTorch CPU 버전을 먼저 설치하고, requirements-cpu.txt의 나머지 의존성 설치
RUN pip install --no-cache-dir --user --upgrade pip setuptools wheel && \
    pip install --no-cache-dir --user torch==2.0.1 --index-url https://download.pytorch.org/whl/cpu && \
    pip install --no-cache-dir --user -r requirements-cpu.txt

# 불필요한 파일 완전 제거
RUN find /root/.local -name "*.pyc" -delete && \
    find /root/.local -name "__pycache__" -type d -exec rm -rf {} + && \
    find /root/.local -name "*.so" -exec strip --strip-unneeded {} \; && \
    find /root/.local -name "*.a" -delete && \
    find /root/.local -type d -name "tests" -exec rm -rf {} + && \
    find /root/.local -type d -name "test" -exec rm -rf {} +

# Stage 2: 런타임 스테이지 (최소 이미지)
FROM python:3.11-slim

# 런타임 환경 최적화
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONPATH=/app \
    PATH=/home/appuser/.local/bin:$PATH \
    OMP_NUM_THREADS=2 \
    TOKENIZERS_PARALLELISM=false \
    TRANSFORMERS_OFFLINE=1

WORKDIR /app

# 런타임에 불필요한 패키지 설치 안함
RUN apt-get update && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# 비root 사용자 생성 (보안)
RUN useradd --create-home --shell /bin/bash --uid 1000 appuser

# 빌드 스테이지에서 설치된 패키지만 복사
COPY --from=builder /root/.local /home/appuser/.local

# 애플리케이션 코드만 복사 (dockerignore로 필터링됨)
COPY app/ ./app/

# 외부 마운트용 모델 디렉토리 생성
RUN mkdir -p /app/models

# 권한 설정
RUN chown -R appuser:appuser /app /home/appuser/.local

# 비root 사용자로 전환
USER appuser

# 포트 노출
EXPOSE 8002

# 헬스체크 비활성화 (로그 노이즈 방지)
# HEALTHCHECK --interval=120s --timeout=10s --start-period=10s --retries=2 \
#     CMD python -c "import urllib.request; urllib.request.urlopen('http://localhost:8002/health')" || exit 1

# 단일 워커로 애플리케이션 실행 (메모리 절약)
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8002", "--workers", "1", "--access-log"] 