# News Service 도커 실행 명령어 가이드 (리팩토링 완료 v2.0)
# ============================================================================

## 🚀 실행 전 준비사항

# 1. news-service 디렉토리로 이동
cd news-service

# 2. .env 파일 생성 (필수)
cat > .env << EOF
# Naver API 설정 (필수)
NAVER_CLIENT_ID=your_actual_client_id
NAVER_CLIENT_SECRET=your_actual_client_secret

# 모델 설정
MODEL_NAME=test123

# ML 설정
MODELS_DIR=/app/models
MONITORED_COMPANIES=삼성전자,LG전자

# 서비스 설정
LOG_LEVEL=INFO
EOF

# 3. .env 파일 권한 설정 (보안)
chmod 600 .env

## 📦 실행 방법 1: 빠른 시작 (CPU 단일 서비스)
# ============================================================================

# 실행
docker-compose -f docker-compose.cpu.yml up -d

# 상태 확인
docker ps
docker logs news-service-cpu --tail 20

# 중지
docker-compose -f docker-compose.cpu.yml down

## 📦 실행 방법 2: 완전한 스택 (CPU + Redis + Celery + 대시보드)
# ============================================================================
# 주의: 이것도 CPU 환경입니다! GPU 아님!

# 실행 (Redis + API + Celery Worker + Celery Beat - 모두 CPU 기반)
docker-compose -f docker-compose.redis.yml up -d

# 서비스 상태 확인
docker-compose -f docker-compose.redis.yml ps

# 전체 로그 확인
docker-compose -f docker-compose.redis.yml logs -f --tail 10

# 개별 서비스 로그 확인
docker-compose -f docker-compose.redis.yml logs -f news-service
docker-compose -f docker-compose.redis.yml logs -f celery-worker
docker-compose -f docker-compose.redis.yml logs -f celery-beat
docker-compose -f docker-compose.redis.yml logs -f redis

# 중지
docker-compose -f docker-compose.redis.yml down

## 📦 실행 방법 3: GPU 환경 (고성능, 높은 컴퓨팅 파워 필요)
# ============================================================================
# 주의: GPU 메모리 8GB+ 권장, 높은 컴퓨팅 파워 필요!

# 사전 요구사항 확인 (NVIDIA Container Toolkit)
docker run --rm --gpus all nvidia/cuda:11.0-base nvidia-smi

# 실행 (단일 서비스, GPU 가속)
docker-compose -f docker-compose.gpu.yml up -d

# GPU 사용 확인
docker exec news-service-gpu nvidia-smi

# 중지
docker-compose -f docker-compose.gpu.yml down

## 🧪 기능 테스트 명령어
# ============================================================================

### 기본 헬스체크
curl http://localhost:8002/health
curl http://localhost:8002/docs

### 🔍 스마트 검색 API 테스트 (캐시 우선)
# 회사 뉴스 스마트 검색
curl -X POST http://localhost:8002/api/v1/search/companies/삼성전자 \
  -H "Content-Type: application/json"

# 회사 뉴스 스마트 분석
curl -X POST http://localhost:8002/api/v1/search/companies/LG전자/analyze \
  -H "Content-Type: application/json"

# 일반 뉴스 스마트 검색
curl -X POST http://localhost:8002/api/v1/search/news \
  -H "Content-Type: application/json" \
  -d '{"query": "ESG", "display": 5}'

# 트렌딩 키워드
curl http://localhost:8002/api/v1/search/trending

### 📊 대시보드 기능 테스트 (Redis 스택에서만 - CPU 환경)
# 주의: docker-compose.redis.yml로 실행했을 때만 가능!
# 대시보드 전체 상태
curl http://localhost:8002/api/v1/dashboard/status

# 모니터링 회사 목록
curl http://localhost:8002/api/v1/dashboard/companies

# 특정 회사 최신 분석 결과
curl http://localhost:8002/api/v1/dashboard/companies/삼성전자/latest

# 특정 회사 분석 히스토리
curl http://localhost:8002/api/v1/dashboard/companies/삼성전자/history

# 모든 회사 최신 분석 결과
curl http://localhost:8002/api/v1/dashboard/latest

# 백그라운드 분석 요청
curl -X POST http://localhost:8002/api/v1/dashboard/companies/삼성전자/trigger

# 캐시 정보 확인
curl http://localhost:8002/api/v1/dashboard/cache/info

# 회사 캐시 삭제
curl -X DELETE http://localhost:8002/api/v1/dashboard/cache/삼성전자

### 🛠️ 시스템 테스트 (Redis 스택에서만 - CPU 환경)
# 주의: docker-compose.redis.yml로 실행했을 때만 가능!
# 시스템 헬스체크
curl http://localhost:8002/api/v1/system/health

# Celery Worker 테스트
curl -X POST http://localhost:8002/api/v1/system/test/celery

# 5초 후 테스트 결과 확인
sleep 5
curl http://localhost:8002/api/v1/system/test/result

## 🛠️ 트러블슈팅 명령어
# ============================================================================

### 컨테이너 상태 및 로그 확인
# 실행 중인 컨테이너 확인
docker ps -a

# 리소스 사용량 실시간 모니터링
docker stats

# 특정 컨테이너 로그 확인
docker logs news-service-cpu --tail 50 -f
docker logs news-service-api --tail 50 -f
docker logs news-celery-worker --tail 50 -f

### 환경변수 확인
# 컨테이너 내부 환경변수 확인
docker exec news-service-cpu env | grep -E "NAVER|MODEL|REDIS"

# .env 파일 내용 확인
cat .env

### 모델 디렉토리 확인
# 모델 파일 존재 확인
ls -la ../newstun-service/models/
docker exec news-service-cpu ls -la /app/models/

# 모델 로딩 상태 확인 (로그에서)
docker logs news-service-cpu 2>&1 | grep -i "모델\|model"

### Redis 연결 확인 (Redis 스택)
# Redis 컨테이너 상태
docker exec news-redis redis-cli ping

# Redis 데이터 확인
docker exec news-redis redis-cli keys "*"

# Redis 연결 테스트
curl http://localhost:8002/api/v1/dashboard/cache/info

### 네트워크 및 포트 확인
# 포트 바인딩 확인
docker port news-service-cpu
netstat -tulpn | grep :8002

# 컨테이너 네트워크 확인
docker network ls
docker inspect news-service-network

### 메모리 및 성능 문제
# 메모리 사용량 상세 확인
docker exec news-service-cpu free -h
docker exec news-service-cpu ps aux --sort=-%mem | head -10

# 디스크 사용량 확인
docker system df
docker exec news-service-cpu df -h

## 🔄 재시작 및 초기화 명령어
# ============================================================================

### 서비스 재시작
# CPU 단일 서비스
docker-compose -f docker-compose.cpu.yml restart

# Redis 전체 스택
docker-compose -f docker-compose.redis.yml restart

# 특정 서비스만 재시작
docker-compose -f docker-compose.redis.yml restart news-service
docker-compose -f docker-compose.redis.yml restart celery-worker

### 완전 초기화
# 모든 컨테이너 중지 및 삭제
docker-compose -f docker-compose.cpu.yml down --remove-orphans
docker-compose -f docker-compose.redis.yml down --remove-orphans --volumes

# 이미지 재빌드
docker-compose -f docker-compose.cpu.yml build --no-cache
docker-compose -f docker-compose.redis.yml build --no-cache

# 시스템 정리
docker system prune -f
docker volume prune -f

## 📊 성능 측정 명령어
# ============================================================================

### API 응답 시간 측정
# 뉴스 검색 성능
time curl -X POST http://localhost:8002/api/v1/news/company/simple \
  -H "Content-Type: application/json" \
  -d '{"company": "삼성전자"}' \
  -w "Response time: %{time_total}s\n"

# 대시보드 응답 성능
time curl http://localhost:8002/api/v1/dashboard/status \
  -w "Response time: %{time_total}s\n"

### 동시 요청 부하 테스트 (Apache Bench 사용 시)
# 동시 10개 요청, 총 100개 요청
ab -n 100 -c 10 -H "Content-Type: application/json" \
  -p test_data.json http://localhost:8002/api/v1/news/company/simple

# test_data.json 파일 생성
echo '{"company": "삼성전자"}' > test_data.json

## 📝 주요 엔드포인트 URL (통합 라우터 v2.0)
# ============================================================================
# API 문서 (Swagger): http://localhost:8002/docs
# 루트 페이지: http://localhost:8002/
# 헬스체크: http://localhost:8002/health 또는 http://localhost:8002/api/v1/system/health

# 🔍 스마트 검색 (캐시 우선)
# 회사 뉴스 검색: http://localhost:8002/api/v1/search/companies/{company}
# 회사 뉴스 분석: http://localhost:8002/api/v1/search/companies/{company}/analyze
# 일반 뉴스 검색: http://localhost:8002/api/v1/search/news

# 📊 대시보드 (백그라운드 데이터)
# 대시보드 상태: http://localhost:8002/api/v1/dashboard/status
# 회사 최신 분석: http://localhost:8002/api/v1/dashboard/companies/{company}/latest
# 모든 회사 결과: http://localhost:8002/api/v1/dashboard/latest

# 🛠️ 시스템 관리
# 시스템 헬스체크: http://localhost:8002/api/v1/system/health
# Celery 테스트: http://localhost:8002/api/v1/system/test/celery

## 🎯 권장 실행 순서 (모두 독립적)
# ============================================================================
# 1. 개발/테스트: docker-compose.cpu.yml (CPU, 가벼움, 단일 서비스)
# 2. 완전한 기능: docker-compose.redis.yml (CPU + Redis + Celery, 전체 스택)
# 3. 고성능 필요: docker-compose.gpu.yml (GPU, 단일 서비스, 높은 리소스 필요)

# 🔥 일반적으로는 방법 2 (Redis 스택)을 추천합니다!
# GPU는 컴퓨팅 파워가 충분할 때만 사용하세요.

## 💡 유용한 팁
# ============================================================================
# - 로그 실시간 확인: docker-compose logs -f
# - 특정 서비스 재시작: docker-compose restart [service_name]
# - 환경변수 변경 후: docker-compose down && docker-compose up -d
# - 성능 이슈 시: docker stats로 리소스 확인
# - Redis 데이터 초기화: docker-compose down --volumes

# 작성일: 2024년 (통합 라우터 v2.0 - 스마트 캐시)
# 아키텍처: Clean Architecture + 의존성 주입 + 통합 라우터 + 스마트 캐시
# 
# 📋 주요 개선사항:
# • 라우터 통합: news_router + dashboard_router → unified_router
# • 스마트 캐시: 캐시 우선 → 실시간 폴백 전략
# • 사용 목적별 분리: /search (실시간) vs /dashboard (백그라운드)
# • 향상된 성능: 캐시 히트 시 100ms, 캐시 미스 시에만 실시간 처리 